apiVersion: apps/v1       # API version of Kubernetes Deployment
kind: Deployment          # Type of manifest (Deployment, Pod, Service, etc.)
metadata:                 # Metadata about the app
  name: nginx-demo        # Deployment name
  namespace: default      # Namespace where it should be deployed, in this case Default.
  labels:                 # Labels for selection and monitoring
    app: nginx-demo
    environment: dev       # Spec of Tags, Dev, Staging, Prod
  annotations:
    prometheus.io/scrape: "true"  # Annotation to allow Prometheus to scrape metrics (Pathway for Prom)
    prometheus.io/port: "80"      # Port for Prometheus scraping      (Port Passage for Prom)
spec:                     # Specifications for the Deployment
  replicas: 2             # Minimum number of pod replicas
  selector:
    matchLabels:          # Must match the pod template labels
      app: nginx-demo
  template:
    metadata:
      labels:
        app: nginx-demo   # Pod label for selector
    spec:
      securityContext:     # Security context for the Pod
        runAsNonRoot: true           # Ensure container does not run as root
        runAsUser: 1000              # Specific non-root UID
        runAsGroup: 3000             # Specific non-root GID
        fsGroup: 2000                # Group for mounted volumes
      containers:
        - name: nginx                   # Container name
          image: nginx:1.25             # Container image and version (pinning is best practice)
          ports:
            - containerPort: 80         # Port for HTTP traffic
          resources:                    # Resource requests and limits to avoid starvation
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
          livenessProbe:                 # Checks if the container is alive
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:                # Checks if the container is ready to serve traffic
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
          imagePullPolicy: IfNotPresent  # Only pull image if not present, avoids unnecessary network pulls
          securityContext:               # Container-level security
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL                  # Drop all Linux capabilities
